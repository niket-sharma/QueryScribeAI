from pydantic import BaseModel, Field, validator
from typing import Optional, Dict, Any
from enum import Enum

class ValidationStatus(str, Enum):
    """Validation status enumeration."""
    SUCCESS = "Success"
    FAILED = "Failed"
    SKIPPED = "Skipped"

class QueryRequest(BaseModel):
    """Request model for a new query."""
    question: str = Field(
        ...,
        min_length=1,
        max_length=2000,
        description="Natural language question to convert to SQL",
        example="Show me all customers who made orders in the last 30 days"
    )
    db_schema: Optional[str] = Field(
        None,
        max_length=50000,
        description="Database schema (DDL) to use for query generation",
        example="CREATE TABLE customers (id INT PRIMARY KEY, name VARCHAR(100));"
    )

    @validator('question')
    def validate_question(cls, v):
        if not v.strip():
            raise ValueError('Question cannot be empty or whitespace only')
        return v.strip()

class QueryResponse(BaseModel):
    """Response model containing the generated SQL and its explanation."""
    natural_language_question: str = Field(..., description="Original user question")
    sql_query: str = Field(..., description="Generated SQL query")
    explanation: str = Field(..., description="Plain language explanation of the SQL query")
    validation_status: ValidationStatus = Field(..., description="SQL validation status")
    validation_message: str = Field(..., description="Validation result message")
    execution_time_ms: Optional[float] = Field(None, description="Total execution time in milliseconds")
    plan: Optional[Dict[str, Any]] = Field(None, description="Structured plan generated by analyzer")

class ErrorResponse(BaseModel):
    """Error response model."""
    error: str = Field(..., description="Error type")
    message: str = Field(..., description="Detailed error message")
    details: Optional[Dict[str, Any]] = Field(None, description="Additional error details")